{"version":3,"sources":["PostPreview.jsx","App.js","serviceWorker.js","index.js"],"names":["PostPreview","string","indexOf","this","removeUnicode","replace","excerpt","props","rendered","featureImage","acf","feature_image","react_default","a","createElement","className","src","url","alt","title","dangerouslySetInnerHTML","__html","href","React","Component","App","state","posts","loading","_this2","axios","get","concat","params","_sort","then","response","setState","data","catch","error","console","log","_this$state","class","map","post","src_PostPreview","Object","assign","key","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PAmCeA,wLAhCCC,GACZ,OAAIA,EAAOC,QAAQ,YAAc,EACxBC,KAAKC,cAAcH,EAAOI,QAAQ,UAAW,MAE7CJ,EAAOI,QAAQ,MAAO,IAAIA,QAAQ,iBAAkB,wCAK7D,IAAMC,EAAUH,KAAKC,cAAcD,KAAKI,MAAMD,QAAQE,UAChDC,EAAeN,KAAKI,MAAMG,IAAIC,cAEpC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZN,GACCG,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,EAAaQ,IAAKF,UAAU,eAAeG,IAAI,KAE3DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcZ,KAAKI,MAAMY,MAAMX,UAC7CI,EAAAC,EAAAC,cAAA,OACEC,UAAU,YACVK,wBAAyB,CAAEC,OAAQf,KAErCM,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,IAAIP,UAAU,wBAAtB,sBAxBgBQ,IAAMC,WCiDjBC,6MA7CbC,MAAQ,CACNC,MAAO,GACPC,SAAS,uFAGU,IAAAC,EAAA1B,KAGnB2B,IACGC,IADH,GAAAC,OAFgB,kDAGK,CACjBC,OAAQ,CACNC,MAAO,oBAGVC,KAAK,SAAAC,GACJP,EAAKQ,SAAS,CAAEV,MAAOS,EAASE,KAAMV,SAAS,MAEhDW,MAAM,SAAAC,GACLC,QAAQC,IAAI,oBAAqBF,sCAI9B,IAAAG,EACoBxC,KAAKuB,MAAxBC,EADDgB,EACChB,MAAOC,EADRe,EACQf,QACf,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAChBH,EAAAC,EAAAC,cAAA,OAAK8B,MAAM,aACThC,EAAAC,EAAAC,cAAA,2CAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8CACZa,EACG,aACAD,EAAMkB,IAAI,SAAAC,GAAI,OAAIlC,EAAAC,EAAAC,cAACiC,EAADC,OAAAC,OAAA,CAAaC,IAAKJ,EAAKK,IAAQL,iBArCjDtB,aCOE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.6df2ba2e.chunk.js","sourcesContent":["import React from \"react\";\n\nclass PostPreview extends React.Component {\n  removeUnicode(string) {\n    if (string.indexOf(\"&#8217;\") >= 0) {\n      return this.removeUnicode(string.replace(\"&#8217;\", \"'\"));\n    } else {\n      return string.replace(\"<p>\", \"\").replace(\"[&hellip;]</p>\", \"...\");\n    }\n  }\n\n  render() {\n    const excerpt = this.removeUnicode(this.props.excerpt.rendered);\n    const featureImage = this.props.acf.feature_image;\n\n    return (\n      <div className=\"card mb-4\">\n        {featureImage && (\n          <img src={featureImage.url} className=\"card-img-top\" alt=\"\" />\n        )}\n        <div className=\"card-body\">\n          <h3 className=\"card-title\">{this.props.title.rendered}</h3>\n          <div\n            className=\"card-text\"\n            dangerouslySetInnerHTML={{ __html: excerpt }}\n          />\n          <a href=\"#\" className=\"btn btn-primary mt-4\">\n            Read more\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostPreview;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport PostPreview from \"./PostPreview\";\n\nclass App extends Component {\n  state = {\n    posts: [],\n    loading: true\n  };\n\n  componentWillMount() {\n    const api_url = \"https://www.arcdisco.co.uk/wp-json/wp/v2/posts\";\n\n    axios\n      .get(`${api_url}`, {\n        params: {\n          _sort: \"createdAt:desc\"\n        }\n      })\n      .then(response => {\n        this.setState({ posts: response.data, loading: false });\n      })\n      .catch(error => {\n        console.log(\"An error occured:\", error);\n      });\n  }\n\n  render() {\n    const { posts, loading } = this.state;\n    return (\n      <div className=\"app\">\n        <header className=\"c-header\">\n          <div class=\"container\">\n            <h1>Welcome to ARC Disco's blog</h1>\n          </div>\n        </header>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-10 offset-md-1 col-lg-8 offset-lg-2\">\n              {loading\n                ? \"Loading...\"\n                : posts.map(post => <PostPreview key={post.id} {...post} />)}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}