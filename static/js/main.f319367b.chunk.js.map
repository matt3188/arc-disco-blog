{"version":3,"sources":["utils/api.js","Header.jsx","PostPreview.jsx","Home.jsx","Post.jsx","App.js","serviceWorker.js","index.js"],"names":["api_url","Header","react_default","a","createElement","className","Link","to","PostPreview","string","indexOf","this","removeUnicode","replace","excerpt","props","rendered","featureImage","acf","feature_image","src","url","alt","title","dangerouslySetInnerHTML","__html","concat","id","Component","Home","_this$props","loading","posts","console","log","map","post","src_PostPreview","Object","assign","key","Post","_ref","Fragment","content","App","state","_this2","axios","get","params","_sort","then","response","data","catch","error","setState","filter","item","toString","_this3","_this$state","BrowserRouter","basename","src_Header","Route","exact","path","render","src_Home","src_Post","getPostById","match","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f319367b.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst api_url = \"https://www.arcdisco.co.uk/wp-json/wp/v2/posts\";\n\nexport const getPosts = () => {\n  return axios\n    .get(`${api_url}`, {\n      params: {\n        _sort: \"createdAt:desc\"\n      }\n    })\n    .then(response => response.data)\n    .catch(error => {\n      console.log(\"An error occured:\", error);\n    });\n};\n\nexport const getPost = id => {\n  return axios\n    .get(`${api_url}/${id}`)\n    .then(response => response.data)\n    .catch(error => {\n      console.log(\"An error occured:\", error);\n    });\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = () => (\n  <header className=\"c-header\">\n    <div className=\"container\">\n      <Link to=\"/\" className=\"mr-4\">\n        Home\n      </Link>\n      <h1>Welcome to ARC Disco's blog</h1>\n    </div>\n  </header>\n);\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass PostPreview extends Component {\n  removeUnicode(string) {\n    if (string.indexOf(\"&#8217;\") >= 0) {\n      return this.removeUnicode(string.replace(\"&#8217;\", \"'\"));\n    } else {\n      return string.replace(\"<p>\", \"\").replace(\"[&hellip;]</p>\", \"...\");\n    }\n  }\n\n  render() {\n    const excerpt = this.removeUnicode(this.props.excerpt.rendered);\n    const featureImage = this.props.acf.feature_image;\n\n    return (\n      <div className=\"card mb-3\">\n        {featureImage && (\n          <img src={featureImage.url} className=\"card-img-top\" alt=\"\" />\n        )}\n        <div className=\"card-body\">\n          <h3 className=\"card-title\">{this.props.title.rendered}</h3>\n          <div\n            className=\"card-text\"\n            dangerouslySetInnerHTML={{ __html: excerpt }}\n          />\n          <Link to={`/${this.props.id}`}>Read more</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostPreview;\n","import React, { Component } from \"react\";\n\nimport PostPreview from \"./PostPreview\";\n\nclass Home extends Component {\n  render() {\n    const { loading, posts } = this.props;\n    console.log(loading);\n\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"card-columns\">\n              {loading\n                ? \"Loading...\"\n                : posts.map(post => <PostPreview key={post.id} {...post} />)}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\n\nconst Post = ({ post, loading }) => (\n  <React.Fragment>\n    <div className=\"container\">\n      {loading ? (\n        <div className=\"row\">\n          <div className=\"col-md-10 offset-md-1 col-lg-8 offset-lg-2\">\n            <p>Loading...</p>\n          </div>\n        </div>\n      ) : (\n        <div>\n          <h1>{post.title.rendered}</h1>\n\n          {post.acf.feature_image && (\n            <img\n              src={post.acf.feature_image.url}\n              className=\"card-img-top mt-4 mb-4\"\n              alt=\"\"\n            />\n          )}\n\n          <div dangerouslySetInnerHTML={{ __html: post.content.rendered }} />\n        </div>\n      )}\n    </div>\n  </React.Fragment>\n);\n\nexport default Post;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport { getPosts } from \"./utils/api\";\n\nimport Header from \"./Header\";\nimport Home from \"./Home\";\nimport Post from \"./Post\";\n\nclass App extends Component {\n  state = {\n    posts: [],\n    loading: true\n  };\n\n  componentWillMount() {\n    getPosts().then(response =>\n      this.setState({ posts: response, loading: false })\n    );\n  }\n  getPostById(id) {\n    return this.state.posts.filter(item => id === item.id.toString())[0];\n  }\n\n  render() {\n    const { posts, loading } = this.state;\n    console.log(loading);\n\n    return (\n      <Router basename={process.env.PUBLIC_URL + \"/\"}>\n        <div className=\"app\">\n          <Header />\n          <Route\n            exact\n            path=\"/\"\n            render={props => (\n              <Home {...props} loading={loading} posts={posts} />\n            )}\n          />\n          <Route\n            path=\"/:id\"\n            render={props => (\n              <Post\n                {...props}\n                loading={loading}\n                post={this.getPostById(props.match.params.id)}\n              />\n            )}\n          />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}